from pydantic import BaseModel, Field, validator
from typing import Optional
from bson import ObjectId


class Project(BaseModel):
    '''
    Project Class for the FastAPI Application
    In this class, we define the schema for the Project collection in the MongoDB Database

    It has the following methods:
    get_indexes: This method returns the indexes for the Project collection

    '''
    id: Optional[ObjectId] = Field(None, alias='_id')
    # i used alias to rename the id field to _id to avoid conflicts with the default id field in the MongoDB collection and the private id field in the Project class
    # this id is generated by mongodb when creating a new document
    # when i retrieve the document i get this id but when i create it i dont need to provide it so it is optional

    project_id: str = Field(..., min_length=1)

    @validator('project_id')
    # create custom validator for the project id field
    def project_id_validator(cls, value):
        if not value.isalnum():
            raise ValueError('Project id must be alphanumeric')
        return value

    class Config:
        arbitrary_types_allowed = True

    @classmethod
    def get_indexes(cls):
        return [
            {
                "key": [
                    ("project_id", 1)
                ],  # means use project_id as an index and 1 means >> sort it ascending
                "name": "project_id_index_1",
                "unique": True
            }
        ]
